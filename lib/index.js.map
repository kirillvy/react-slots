{"version":3,"sources":["webpack://slottr/webpack/universalModuleDefinition","webpack://slottr/webpack/bootstrap","webpack://slottr/external \"react\"","webpack://slottr/./src/utils/useScope.tsx","webpack://slottr/./src/utils/createSlot.tsx","webpack://slottr/./src/ConditionalSlot/index.tsx","webpack://slottr/./src/index.tsx","webpack://slottr/./src/ConditionalSlot/createConditionalSlot.tsx","webpack://slottr/./src/FilterSlot/index.tsx","webpack://slottr/./src/CompositionSlot/index.tsx"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ScopeMap","Map","childrenProp","super","lastIndex","scopeChildren","this","children","injectElement","child","childType","isValidElement","undefined","type","obj","displaySymbol","displayName","resultGet","index","pushLastIndex","set","push","includes","arr","every","evalSlot","includeSlots","reduce","filterSlot","excludeSlots","all","prev","vals","reduceConds","forEach","val","cond","nonSlotted","exclude","el","isConditionsComponent","slot","test","objConditions","filter","elem","props","some","has","mapArr","Array","length","Children","els","sort","a","b","map","entity","prevV","default","scope","injectSlot","Element","slotProps","defaultElement","defaultProps","passedProps","withContext","childIs","Context","Provider","contextChildren","React","cloneElement","childProps","SlottableElement","Fragment","renderInParam","renderAs","renderIn","renderInProps","createElement","createSlot","SlottedElement","createContext","Before","After","Slot","multiple","fallback","fallbackProps","noHeaders","childrenObj","res","headersList","footersList","headers","footers","element","childObj","result","SlotFactory","SubSlot","Consumer","SubSlotFactory","contextTypes","createLayeredSlot","elDisplay","IF","ELSEIF","ELSE","slotEvalIf","excludes","condition","include","conditional","Boolean","createDefaultConditionalSlot","typeSymbol","parent","ConditionalSlot","elProps","newProps","scopeObj","evalResult","onIf","pastIf","cur","valid","If","ElseIf","Else","mapElements","setTimeout","ConditionalSlotElement","createConditionalElement","useScope","createConditionalSlot","FilterSlot","CompositionSlot","Conditional","ConditionalSubSlotFactory","createFilterSlot","grouped","childrenObject","x","filterElement","checkSlot","included","isSlotted","childrenCount","count","FilterSlotFactory","DefaultFilterSlot","CompositionSlotComponent","isArray","El","slotted","CompositionSlotFactory","createCompositionSlot"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"slottr\", [\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"slottr\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"slottr\"] = factory(root[\"react\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import React from 'react';\nimport { ISortChildrenEl, ISlotComponent } from './createSlot';\n\n/**\n * Indexes React children for faster access by Slot components\n * @param scope - react children, in any format\n */\n\nexport interface IConditionsComponent {\n  /**\n   * Slottable component for filtering\n   */\n  slot: ISlotComponent<any>;\n  /**\n   * Slottable component test\n   */\n  test: <T = any>(props: T) => boolean;\n}\n\nexport type TConditionalSlot = ISlotComponent<any> | IConditionsComponent;\n\n/**\n * Scope object. Slottable elements are tracked as Element.DisplaySymbol\n * Custom components as Element.DisplayName.\n */\nexport class ScopeMap extends Map<symbol | string, ISortChildrenEl[]> {\n  public static isConditionsComponent = (\n    entity: ISlotComponent<any> | IConditionsComponent,\n    ): entity is IConditionsComponent => {\n    return (entity as IConditionsComponent).test !== undefined;\n  }\n  /**\n   * Reduces conditions to an object.\n   */\n  public static reduceConds = (arr: TConditionalSlot[]) => arr.reduce((prevV, val) => {\n    const key = ScopeMap.isConditionsComponent(val) ? val.slot.displaySymbol : val.displaySymbol as any;\n    prevV[key] = val;\n    return prevV;\n  }, {} as { [x: string]: TConditionalSlot })\n\n  /**\n   * Sorts elements by order of appearance\n   * @param els children object to sort into children\n   */\n  public static sortElements(els: ISortChildrenEl[]): JSX.Element[] {\n    return els.sort((a, b) => a.index - b.index).map((el) => el.child);\n  }\n  /**\n   * Returns grouped elements, by order of appearance\n   * @param els children object to sort into children\n   */\n  public static mapElements(els: ISortChildrenEl[]): JSX.Element[] {\n    return els.map((el) => el.child);\n  }\n  private lastIndex = -1;\n  private children: any;\n  constructor(childrenProp?: any) {\n    super();\n    if (!childrenProp) {\n      return;\n    }\n    const mapArr = (arr: any[]) => arr.reduce((prev, el) => {\n        if (el instanceof Array && el.length) {\n          prev.push(...mapArr(el));\n        } else {\n          prev.push(el);\n        }\n        return prev;\n      },\n      [] as any[]);\n    this.children = mapArr([childrenProp]);\n    React.Children.forEach(childrenProp, this.injectElement);\n  }\n  /**\n   * Injects element into the scope\n   * @param child JSX element to inject\n   */\n  public scopeChildren = () => this.children;\n  /**\n   * inject JSX element into scope object\n   */\n  public injectElement = (child: JSX.Element) => {\n    let childType = 'string';\n    if (React.isValidElement(child) && child.type !== undefined) {\n      const obj: any = child.type;\n      if (obj.hasOwnProperty('displaySymbol')) {\n        childType = obj.displaySymbol;\n      } else if (obj.hasOwnProperty('displayName')) {\n        childType = obj.displayName || 'string';\n      } else {\n        childType = obj;\n      }\n    }\n    const resultGet = this.get(childType);\n    const index = this.pushLastIndex();\n    if (resultGet === undefined) {\n      this.set(childType, [{index, child}]);\n    } else {\n      resultGet.push({index, child});\n      this.set(childType, resultGet);\n    }\n  }\n  /**\n   * Tests whether object includes all conditional slots\n   * @param arr conditional slots for inclusion\n   */\n  public includes = (...arr: TConditionalSlot[]) => {\n    return arr.every(this.evalSlot(true));\n  }\n  /**\n   * Tests whether object excludes all conditional slots\n   * @param arr conditional slots for exclusion\n   */\n  public excludes(...arr: TConditionalSlot[]) {\n    return !arr.some(this.evalSlot());\n  }\n  /**\n   * Returns array of conditional slots included\n   * @param arr conditional slots for inclusion\n   */\n  public includeSlots = (arr: TConditionalSlot[]) => {\n    return arr.reduce(this.filterSlot(), [] as ISortChildrenEl[]);\n  }\n  /**\n   * Returns array of conditional slots without the excluded ones\n   * @param arr conditional slots for exclusion\n   * @param all include all elements including non-conditional slots\n   */\n  public excludeSlots = (arr: TConditionalSlot[], all?: boolean) => {\n    const prev: ISortChildrenEl[] = [];\n    const vals = ScopeMap.reduceConds(arr);\n    this.forEach((val, key) => {\n      if (typeof key !== 'symbol' && all !== true) {\n        return;\n      }\n      const cond = vals[key as any];\n      if (cond) {\n        this.filterSlot(true)(prev, cond);\n      } else {\n        prev.push(...val);\n      }\n    });\n    return prev;\n  }\n  /**\n   * Returns all non-slot elements in scope\n   */\n  public nonSlotted = () => {\n    const prev: ISortChildrenEl[] = [];\n    this.forEach((val, key) => {\n      if (typeof key !== 'symbol') {\n        prev.push(...val);\n      }\n    });\n    return prev;\n  }\n  /**\n   * controls index on insert\n   */\n  private pushLastIndex = () => {\n    this.lastIndex += 1;\n    return this.lastIndex;\n  }\n  /**\n   * filters slots by params\n   */\n  private filterSlot = (exclude?: boolean) => (prev: ISortChildrenEl[], el: TConditionalSlot) => {\n    if (ScopeMap.isConditionsComponent(el)) {\n      const { slot, test } = el;\n      const objConditions = this.get(slot.displaySymbol);\n      if (objConditions !== undefined) {\n        if (exclude) {\n          prev.push(...objConditions.filter((elem) => !test(elem.child.props)));\n        } else {\n          prev.push(...objConditions.filter((elem) => test(elem.child.props)));\n        }\n      }\n      return prev;\n    }\n    const obj = this.get(el.displaySymbol);\n    if (obj !== undefined && exclude !== true) {\n      prev.push(...obj);\n    }\n    return prev;\n  }\n  /**\n   * evals slots by params\n   */\n  private evalSlot = (includes?: boolean) => (el: TConditionalSlot) => {\n    if (ScopeMap.isConditionsComponent(el)) {\n      const {slot, test} = el;\n      const obj = this.get(slot.displaySymbol);\n      if (includes) {\n        return obj !== undefined && obj.every((elem) => test(elem.child.props)) === true;\n      }\n      return obj !== undefined && obj.some((elem) => test(elem.child.props)) === true;\n    }\n    return this.has(el.displaySymbol);\n  }\n}\n/**\n * Creates scope object for work with slots\n * @param scope - React Children prop\n */\nconst useScope = (scope: any): ScopeMap => {\n  if (scope instanceof ScopeMap) {\n    return scope;\n  }\n  if (scope === undefined || scope.length === 0) {\n    return new ScopeMap();\n  }\n  const result = new ScopeMap(scope);\n  return result;\n};\n\nexport {useScope as default};\n","import * as React from 'react';\n\nimport useScope from './useScope';\n\nexport interface ISlot<T = any> {\n  /**\n   * Default children of element, if any. Otherwise, nothing will be shown.\n   */\n  children?: any;\n  /**\n   * Props that will always be rendered, no matter the scenario\n   */\n  props?: T;\n  /**\n   * default props to use when the default element is rendered\n   */\n  defaultProps?: JSX.IntrinsicAttributes & React.PropsWithChildren<T>;\n  /**\n   * props passed to the element from the component containing the slot\n   */\n  passedProps?: T;\n  /**\n   * Elements or indexed children object passed for filtering\n   */\n  scope?: any;\n  /**\n   * Slottable component test\n   */\n  test?: <S = any>(props: S) => boolean;\n  /**\n   * Display all if multiple slots are passed\n   */\n  multiple?: boolean;\n  /**\n   * Components are composed through their immediate children instead of\n   * children of element\n   */\n  withContext?: boolean;\n  /**\n   * fallback to use if slot is not used\n   */\n  fallback?: any;\n  /**\n   * default props to use with default element\n   */\n  fallbackProps?: JSX.IntrinsicAttributes & React.PropsWithChildren<T>;\n  /**\n   * Designate the children prop as the default element, the fallback element or both\n   */\n  childIs?: 'fallback' | 'default' | 'both';\n  /**\n   * Component is always rendered.\n   */\n  unconditional?: boolean;\n  noHeaders?: boolean;\n}\n\ntype TAny = any;\ntype ElType<T> = ISlotComponent<T> | ISlotComponentExtended<T>;\n\ninterface IRenderAs extends TAny {\n  renderIn?: React.ComponentType | keyof JSX.IntrinsicElements | false;\n  /**\n   * Props passed into next level component\n   */\n  renderInProps?: any;\n  /**\n   * Element injected for rendering instead of default. Any props will have to be compatible.\n   */\n  renderAs?: React.ComponentType | keyof JSX.IntrinsicElements;\n}\n\nexport interface ISubSlot<T> extends Partial<ISlot<T>> {\n  scope: React.Context<any>;\n}\n\nexport interface ISlotElement<T> extends React.FunctionComponent<ISlot<T>> {\n  displaySymbol: symbol;\n}\n\nexport interface ISubSlotElement<T> extends React.FunctionComponent<ISubSlot<T>> {\n  displaySymbol: symbol;\n}\n\nexport interface ISlotComponentBase<T = any> extends React.FunctionComponent<T | IRenderAs | {children?: any}> {\n  Context: React.Context<any>;\n  displaySymbol: symbol;\n}\n\nexport interface ISlotComponent<T = any> extends ISlotComponentBase<T> {\n  Slot: ISlotElement<T>;\n  SubSlot: ISubSlotElement<T>;\n  Before: IHeaderFooter;\n  After: IHeaderFooter;\n}\n\nexport interface ISlotElementExtended<T> extends ISlotComponent<ISlot<T>> {\n  displaySymbol: symbol;\n}\n\nexport interface ISlotComponentExtended<T = any> extends ISlotComponentBase<T> {\n  Slot: ISlotElementExtended<T>;\n  SubSlot: ISubSlotElement<T>;\n  Before: IHeaderFooter;\n  After: IHeaderFooter;\n}\n\ninterface IOverloadCreateSlot {\n  (\n    Element: keyof JSX.IntrinsicElements | React.ComponentType,\n    renderIn?: React.ComponentType | keyof JSX.IntrinsicElements,\n  ): ISlotComponent;\n  <T extends keyof JSX.IntrinsicElements>(\n    Element: T | React.ComponentType,\n    renderIn?: React.ComponentType | keyof JSX.IntrinsicElements,\n  ): ISlotComponent<Partial<JSX.IntrinsicElements[T]>>;\n  <T extends {}>(\n    Element?: React.ComponentType,\n    renderIn?: React.ComponentType | keyof JSX.IntrinsicElements,\n    ): ISlotComponent<T>;\n  <S extends keyof JSX.IntrinsicElements, T extends {}>(\n    Element?: React.ComponentType,\n    renderIn?: React.ComponentType | keyof JSX.IntrinsicElements,\n  ): ISlotComponent<T & Partial<JSX.IntrinsicElements[S]>>;\n  <T extends {}, S extends keyof JSX.IntrinsicElements>(\n    Element?: React.ComponentType,\n    renderIn?: React.ComponentType | keyof JSX.IntrinsicElements,\n  ): ISlotComponent<T & Partial<JSX.IntrinsicElements[S]>>;\n}\n\ninterface IOverloadCreateLayeredSlot {\n  (\n    Element: keyof JSX.IntrinsicElements | React.ComponentType,\n    renderIn: React.ComponentType | keyof JSX.IntrinsicElements,\n  ): ISlotComponentExtended;\n  <T extends keyof JSX.IntrinsicElements>(\n    Element: T | React.ComponentType,\n    renderIn: React.ComponentType | keyof JSX.IntrinsicElements,\n  ): ISlotComponentExtended<Partial<JSX.IntrinsicElements[T]>>;\n  <T extends {}>(\n    Element: React.ComponentType,\n    renderIn: React.ComponentType | keyof JSX.IntrinsicElements,\n    ): ISlotComponentExtended<T>;\n  <S extends keyof JSX.IntrinsicElements, T extends {}>(\n    Element: React.ComponentType,\n    renderIn: React.ComponentType | keyof JSX.IntrinsicElements,\n  ): ISlotComponentExtended<T & Partial<JSX.IntrinsicElements[S]>>;\n  <T extends {}, S extends keyof JSX.IntrinsicElements>(\n    Element: React.ComponentType,\n    renderIn: React.ComponentType | keyof JSX.IntrinsicElements,\n  ): ISlotComponentExtended<T & Partial<JSX.IntrinsicElements[S]>>;\n}\n\nexport interface IHeaderFooter extends React.FunctionComponent {\n  displaySymbol: symbol;\n  typeSymbol: symbol;\n}\n\nexport interface ISortChildrenEl {\n  index: number;\n  child: JSX.Element;\n}\n\nexport type SlotType<T = {}, S = {}> =\n  T extends {} ? S extends keyof JSX.IntrinsicElements ? T & Partial<JSX.IntrinsicElements[S]> : T :\n  T extends keyof JSX.IntrinsicElements ? S extends {} ? S & Partial<JSX.IntrinsicElements[T]> :\n   Partial<JSX.IntrinsicElements[T]> : any;\n\nexport const injectSlot = <T extends {}>(\n  Element: ElType<T>, slotProps: ISlot<T>,\n  ) => (child: JSX.Element, i?: number) => {\n  const { children: defaultElement, defaultProps, passedProps, withContext, props, childIs } = slotProps;\n  if (withContext === true  && defaultElement !== undefined) {\n    if (childIs === 'fallback') {\n      return null;\n    }\n    if (Element.Context.Provider === undefined) {\n      return null;\n    }\n    const contextChildren = React.cloneElement(child, {...props, ...passedProps });\n    return React.cloneElement(child, { key: i, ...props, ...passedProps }, (\n    <Element.Context.Provider\n      key={i}\n      value={useScope(contextChildren.props.children)}\n    >\n    {defaultElement}\n    </Element.Context.Provider>\n    ));\n  }\n  const childProps: any = child.props;\n  if (child.props === undefined) {\n    return child;\n  }\n  if (childProps.hasOwnProperty('children')) {\n    return React.cloneElement(child, { key: i, ...props, ...passedProps });\n  }\n  return React.cloneElement(child, { key: i, ...props, ...defaultProps, ...passedProps }, defaultElement);\n};\n\nconst SlotFactory = <T extends {}>(\n  Element: ElType<T>,\n  ): React.FC<ISlot<T>> => (\n  slotProps,\n) => {\n  const { scope, children: defaultElement, multiple = false,\n    fallback, fallbackProps, childIs, test, noHeaders } = slotProps;\n  const childrenObj = useScope(scope);\n  const res = childrenObj.get(Element.displaySymbol);\n  const headersList = childrenObj.get(Element.Before.displaySymbol) || [];\n  const footersList = childrenObj.get(Element.After.displaySymbol) || [];\n  const headers = headersList.map((el) => el.child);\n  const footers = footersList.map((el) => el.child);\n  if (res === undefined) {\n    if ((childIs === 'fallback' || childIs === 'both') && defaultElement !== undefined) {\n      return React.cloneElement(defaultElement, fallbackProps);\n    }\n    if (fallback !== undefined) {\n      return React.cloneElement(fallback, fallbackProps);\n    }\n    return <>{headers}{footers}</>;\n  }\n  if (multiple === true) {\n    let element = res.reduce((prev, {index, child}) => {\n      const el = injectSlot(Element, slotProps)(child, index);\n      if (el !== null) {\n        prev.push(el);\n      }\n      return prev;\n    }, [] as Array<React.FunctionComponentElement<any>>);\n    if (test !== undefined) {\n      element = element.filter((el) => test(el.props));\n    }\n    return <>{headers}{element}{footers}</>;\n  }\n  const { child: childObj } = res[0];\n  const result = injectSlot(Element, slotProps)(childObj);\n  if (noHeaders && result === null) {\n    return result;\n  }\n  return <>{headers}{result}{footers}</>;\n};\n\nconst SubSlotFactory = <T extends {}>(Element: ElType<T>): React.FC<ISubSlot<T>> => (\n  { scope: Context, ...props },\n) => {\n  return <Context.Consumer>{(value) => <Element.Slot {...props} scope={value}/>}</Context.Consumer>;\n};\n\nconst SlottableElement: (\n    defaultElement?: React.ComponentType | keyof JSX.IntrinsicElements,\n    renderInParam?: React.ComponentType | keyof JSX.IntrinsicElements,\n  ) => React.FC<IRenderAs> = (defaultElement = React.Fragment, renderInParam) => (\n  {children, renderAs, renderIn, renderInProps, ...props},\n  ) => {\n    const el = React.createElement(renderAs || defaultElement, props, children);\n    if (renderInParam && renderIn !== false) {\n      return React.createElement(renderInParam, renderInProps, el);\n    }\n    if (renderIn) {\n      return React.createElement(renderIn, renderInProps, el);\n    }\n    return el;\n  };\n\n/**\n * Slot constructor\n * @param {React.ComponentType<any>} [Element=React.Fragment] - Element for slotting, default is fragment\n */\nconst createSlot: IOverloadCreateSlot = <T extends {} = {}, S extends {} = {}>(\n  Element: React.ComponentType | keyof JSX.IntrinsicElements = React.Fragment,\n  renderIn?: React.ComponentType | keyof JSX.IntrinsicElements,\n  ) => {\n    type CurType = SlotType<T, S>;\n    const SlottedElement = SlottableElement(Element, renderIn) as ISlotComponent<CurType>;\n    SlottedElement.Context = React.createContext(null);\n    SlottedElement.displaySymbol = Symbol();\n    SlottedElement.Before = SlottableElement() as IHeaderFooter;\n    SlottedElement.Before.displaySymbol = Symbol();\n    SlottedElement.After = SlottableElement() as IHeaderFooter;\n    SlottedElement.After.displaySymbol = Symbol();\n    SlottedElement.Slot = SlotFactory<CurType>(SlottedElement) as any;\n    SlottedElement.Slot.displaySymbol = Symbol();\n    SlottedElement.SubSlot = SubSlotFactory<CurType>(SlottedElement) as ISubSlotElement<CurType>;\n    SlottedElement.SubSlot.displaySymbol = Symbol();\n    if (typeof Element !== 'string') {\n      SlottedElement.defaultProps = Element.defaultProps;\n      SlottedElement.contextTypes = Element.contextTypes;\n    }\n    SlottedElement.Slot.displayName = 'Subcomponent.Slot';\n    SlottedElement.displayName = `Subcomponent.SlottedElement`;\n    SlottedElement.SubSlot.displayName = 'Subcomponent.SubSlot';\n    return SlottedElement;\n};\n\nexport const createLayeredSlot: IOverloadCreateLayeredSlot = <T extends {} = {}, S extends {} = {}>(\n  Element: React.ComponentType | keyof JSX.IntrinsicElements = React.Fragment,\n  renderIn: React.ComponentType | keyof JSX.IntrinsicElements,\n  ) => {\n    type CurType = SlotType<T, S>;\n    const SlottedElement = createSlot(Element, renderIn) as ISlotComponentExtended<CurType>;\n    SlottedElement.Slot = createSlot(SlottedElement.Slot);\n    return SlottedElement;\n};\n\nexport {createSlot as default};\n","import React from 'react';\nimport useScope, { TConditionalSlot, ScopeMap } from '../utils/useScope';\n\nexport interface IConditionalSlotBase {\n  children?: any;\n  /**\n   * Elements or indexed children object passed for filtering\n   */\n  scope?: any;\n  /**\n   * Array of slottable components for filtering out\n   */\n  excludes?: TConditionalSlot[];\n  /**\n   * Array of slottable components whitelisted for not being filtered. Overrides 'exclude'\n   */\n  includes?: TConditionalSlot[];\n  /**\n   * Truthy eval of conditions for implementations.\n   */\n  condition?: any;\n}\n\nexport interface IConditionalSubSlot extends IConditionalSlotBase {\n  scope: React.Context<any>;\n}\n\ninterface IOverloadCreateConditional {\n  (\n    Element: keyof JSX.IntrinsicElements | React.ComponentType,\n  ): IConditionalSlot;\n  <T extends keyof JSX.IntrinsicElements>(\n    Element: T | React.ComponentType,\n  ): IConditionalSlot<Partial<JSX.IntrinsicElements[T]>>;\n  <T extends {}>(Element: React.ComponentType): IConditionalSlot<T>;\n  <S extends keyof JSX.IntrinsicElements, T extends {}>(\n    Element: React.ComponentType,\n  ): IConditionalSlot<T & Partial<JSX.IntrinsicElements[S]>>;\n  <T extends {}, S extends keyof JSX.IntrinsicElements>(\n    Element: React.ComponentType,\n  ): IConditionalSlot<T & Partial<JSX.IntrinsicElements[S]>>;\n}\n\nexport interface IConditionalSlot<T = {}> extends React.FC<IConditionalSlotBase & T> {\n  If: IConditionalSlot;\n  ElseIf: IConditionalSlot;\n  Else: IConditionalSlot;\n  SubSlot: React.FC<IConditionalSubSlot & T>;\n  displaySymbol: symbol;\n  typeSymbol: symbol;\n}\n\nconst SubSlotFactory = <T extends {}>(\n  Element: IConditionalSlot,\n  ): React.FC<IConditionalSubSlot & T> => (\n  { scope: Context, ...props },\n) => {\n  return <Context.Consumer>{(value) => <Element {...props} scope={value}/>}</Context.Consumer>;\n};\n\nconst elDisplay = Symbol();\nconst IF = Symbol();\nconst ELSEIF = Symbol();\nconst ELSE = Symbol();\n\nconst slotEvalIf = ({scope, excludes, includes, condition}: IConditionalSlotBase) => {\n  const childrenObj = useScope(scope);\n  const include = (scope && includes) ? childrenObj.includes(...includes) : true;\n  const exclude = (scope && excludes) ? childrenObj.excludes(...excludes) : true;\n  const conditional = condition !== undefined ? Boolean(condition) : true;\n  return include && exclude && conditional;\n};\n\nexport function createDefaultConditionalSlot(\n  Element: keyof JSX.IntrinsicElements | React.ComponentType = React.Fragment,\n  typeSymbol: symbol = IF,\n  parent?: IConditionalSlot,\n  ): IConditionalSlot {\n  function ConditionalSlot(props: IConditionalSlotBase) {\n    const {children, scope, excludes, includes, condition, ...newProps} = props;\n    const elProps = Element === React.Fragment ? {} : {scope, ...newProps};\n    const scopeObj = useScope(children);\n    const evalResult = parent === undefined ? slotEvalIf({scope, excludes, includes, condition}) : true;\n    const obj = scopeObj.get(ConditionalSlot.displaySymbol);\n    let res: React.ReactNode = null;\n    let [onIf, pastIf] = [false, false];\n    if (obj !== undefined) {\n      for (const i of obj) {\n        const cur: any = i.child;\n        const valid = slotEvalIf(cur.props);\n        if (valid) {\n          res = cur;\n        }\n        if (\n          onIf === false\n          && pastIf === false\n          && cur.type.typeSymbol === ConditionalSlot.If.typeSymbol\n          ) {\n          onIf = true;\n          if (valid) {\n            break;\n          }\n          continue;\n        }\n        if (cur.type.typeSymbol === ConditionalSlot.ElseIf.typeSymbol) {\n          pastIf = true;\n          if (valid) {\n            break;\n          }\n          continue;\n        }\n        if (cur.type.typeSymbol === ConditionalSlot.Else.typeSymbol) {\n          res = cur;\n          break;\n        }\n      }\n    }\n    if (evalResult) {\n      const prev = scopeObj.excludeSlots([ConditionalSlot as any], true);\n      if (onIf && res !== null && res !== undefined) {\n        return React.createElement(Element, elProps,\n          ScopeMap.mapElements(prev),\n          res,\n        );\n      }\n      return React.createElement(Element, elProps,\n        ScopeMap.mapElements(prev),\n      );\n    }\n    if (res !== null && onIf === false) {\n      return React.createElement(Element, elProps,\n        res,\n      );\n    }\n    return null;\n  }\n  ConditionalSlot.displaySymbol = elDisplay;\n  ConditionalSlot.typeSymbol = typeSymbol;\n  if (parent === undefined) {\n    const If = createDefaultConditionalSlot(React.Fragment, IF, ConditionalSlot);\n    const Else = createDefaultConditionalSlot(React.Fragment, ELSEIF, ConditionalSlot);\n    const ElseIf = createDefaultConditionalSlot(React.Fragment, ELSE, ConditionalSlot);\n    ConditionalSlot.If = If;\n    ConditionalSlot.ElseIf = Else;\n    ConditionalSlot.Else = ElseIf;\n    // @ts-ignore\n    ConditionalSlot.SubSlot = SubSlotFactory(ConditionalSlot);\n  } else {\n    setTimeout(() => {\n      ConditionalSlot.If = parent.If;\n      ConditionalSlot.ElseIf = parent.Else;\n      ConditionalSlot.Else = parent.ElseIf;\n      ConditionalSlot.SubSlot = SubSlotFactory(parent);\n    }, 0);\n  }\n  return ConditionalSlot;\n}\nconst ConditionalSlotElement: IConditionalSlot = createDefaultConditionalSlot();\n\nexport const createConditionalElement: IOverloadCreateConditional = (\n  Element: keyof JSX.IntrinsicElements | React.ComponentType,\n  ) => createDefaultConditionalSlot(Element, IF);\n\nexport {ConditionalSlotElement as default};\n","import useScope from './utils/useScope';\nimport createSlot, {createLayeredSlot} from './utils/createSlot';\nimport ConditionalSlot, {createConditionalElement} from './ConditionalSlot';\nimport createConditionalSlot from './ConditionalSlot//createConditionalSlot';\nimport FilterSlot from './FilterSlot';\nimport CompositionSlot from './CompositionSlot';\n\nexport {\n  CompositionSlot,\n  ConditionalSlot,\n  FilterSlot,\n  createSlot,\n  createSlot as default,\n  createLayeredSlot,\n  createConditionalSlot,\n  createConditionalElement,\n  useScope,\n};\n","import React from 'react';\nimport createSlot, { ISlotComponentBase, IHeaderFooter, SlotType,\n  ISubSlotElement, ISubSlot, ISlotElement, ISlot } from '../utils/createSlot';\nimport {IConditionalSlot, createDefaultConditionalSlot} from '.';\n\ninterface IHeaderFooterConditional extends IHeaderFooter {\n  Conditional: IConditionalSlot;\n}\n\nexport interface ISlotConditional<T> extends ISlotElement<T> {\n  displaySymbol: symbol;\n  Conditional: IConditionalSlot<T & ISlot>;\n}\n\ninterface ISubSlotConditional<T> extends ISubSlotElement<T> {\n  Conditional: React.FC<ISubSlot<T>>;\n}\n\ninterface IHeaderFooterConditional extends IHeaderFooter {\n  Conditional: IConditionalSlot;\n}\n\nexport interface IConditionalSlotComponent<T = any> extends ISlotComponentBase<T> {\n  Slot: ISlotConditional<T>;\n  SubSlot: ISubSlotConditional<T>;\n  Before: IHeaderFooterConditional;\n  After: IHeaderFooterConditional;\n}\ninterface IOverloadCreateConditionalSlot {\n  (Element: keyof JSX.IntrinsicElements | React.ComponentType): IConditionalSlotComponent;\n  <T extends keyof JSX.IntrinsicElements>(\n    Element: T | React.ComponentType,\n  ): IConditionalSlotComponent<Partial<JSX.IntrinsicElements[T]>>;\n  <T extends {}>(Element?: React.ComponentType): IConditionalSlotComponent<T>;\n  <S extends keyof JSX.IntrinsicElements, T extends {}>(\n    Element?: React.ComponentType,\n  ): IConditionalSlotComponent<T & Partial<JSX.IntrinsicElements[S]>>;\n  <T extends {}, S extends keyof JSX.IntrinsicElements>(\n    Element?: React.ComponentType,\n  ): IConditionalSlotComponent<T & Partial<JSX.IntrinsicElements[S]>>;\n}\nconst ConditionalSubSlotFactory = <T extends {}>(Element: IConditionalSlotComponent): React.FC<ISubSlot<T>> => (\n  { scope: Context, ...props },\n) => {\n  return <Context.Consumer>{(value) => <Element.Slot.Conditional {...props} scope={value}/>}</Context.Consumer>;\n};\n\nconst createConditionalSlot: IOverloadCreateConditionalSlot = <T extends {} = {}, S extends {} = {}>(\n  Element: React.ComponentType | keyof JSX.IntrinsicElements = React.Fragment,\n  ) => {\n  type CurType = SlotType<T, S>;\n  const SlottedElement = createSlot(Element) as IConditionalSlotComponent<CurType>;\n  SlottedElement.Slot.Conditional = createDefaultConditionalSlot(\n    SlottedElement.Slot as React.ComponentType) as IConditionalSlot<CurType & ISlot<any>>;\n  SlottedElement.SubSlot.Conditional = ConditionalSubSlotFactory<CurType>(SlottedElement);\n  SlottedElement.Before.Conditional = createDefaultConditionalSlot(SlottedElement.Before as React.ComponentType);\n  SlottedElement.Before.Conditional.displaySymbol = SlottedElement.Before.displaySymbol;\n  SlottedElement.After.Conditional = createDefaultConditionalSlot(SlottedElement.After as React.ComponentType);\n  SlottedElement.After.Conditional.displaySymbol = SlottedElement.After.displaySymbol;\n  return SlottedElement;\n};\n\nexport {createConditionalSlot as default};\n","import * as React from 'react';\nimport { ISortChildrenEl, ISlotComponent } from '../utils/createSlot';\nimport useScope, {TConditionalSlot, ScopeMap } from '../utils/useScope';\n\nexport interface IFilterSlot {\n  /**\n   * Elements or indexed children object passed for filtering\n   */\n  scope: any;\n  /**\n   * Array of slottable components for filtering out\n   */\n  exclude?: TConditionalSlot[];\n  /**\n   * Array of slottable components whitelisted for not being filtered. Overrides 'exclude'\n   */\n  include?: TConditionalSlot[];\n  /**\n   * Filter out all slottable components, overrides include and exclude properties\n   */\n  all?: boolean;\n  /**\n   * Group all elements in order added.\n   */\n  grouped?: boolean;\n}\n\nexport interface IFilterSubSlot extends IFilterSlot {\n  scope: React.Context<any>;\n}\n\ninterface IFilterSlotComponent extends React.FC<IFilterSlot> {\n  SubSlot: React.FunctionComponent<IFilterSubSlot>;\n}\n\nconst FilterSlotFactory = (Element: React.FC<IFilterSlot>): React.FC<IFilterSubSlot> => (\n  { scope: Context, ...props },\n) => {\n  return <Context.Consumer>{(value) => <Element {...props} scope={value} />}</Context.Consumer>;\n};\n\nconst isSlotted = (\n  child: any | ISlotComponent,\n  ): child is ISlotComponent => child && child.type && child.type.displaySymbol;\n\nexport const createFilterSlot = (\n  Element: keyof JSX.IntrinsicElements | React.ComponentType = React.Fragment,\n) =>  {\n  const FilterSlot = ({ scope, exclude, include, grouped, all }: IFilterSlot) => {\n    if (grouped === true) {\n      const childrenObject = useScope(scope);\n      let prev = [] as ISortChildrenEl[];\n      if (exclude) {\n        prev = childrenObject.excludeSlots(exclude, all);\n      } else if (include) {\n        prev = childrenObject.includeSlots(include);\n        if (all) {\n          prev.push(...childrenObject.nonSlotted());\n        }\n      }\n      const x = ScopeMap.mapElements(prev);\n      return React.createElement(Element, {}, x);\n    }\n    let childrenObj = scope;\n    const res: JSX.Element[] = [];\n    if (scope instanceof ScopeMap) {\n      childrenObj = scope.scopeChildren();\n    }\n    const includeSlots = include && ScopeMap.reduceConds(include);\n    const excludeSlots = exclude && ScopeMap.reduceConds(exclude);\n    const filterElement = (child: JSX.Element) => {\n      const checkSlot = (x: TConditionalSlot | undefined, included: boolean) => {\n        if (x === undefined) {\n          return;\n        }\n        if (ScopeMap.isConditionsComponent(x)) {\n          if (x.test(child.props) === included) {\n            return res.push(child);\n          }\n          return;\n        }\n        if (included) {\n          res.push(child);\n        }\n      };\n      if (isSlotted(child)) {\n        if (excludeSlots) {\n          checkSlot(excludeSlots[child.type.displaySymbol as any], false);\n        } else if (includeSlots) {\n          checkSlot(includeSlots[child.type.displaySymbol as any], true);\n        }\n        return;\n      }\n      if (all) {\n        res.push(child);\n      }\n    };\n    const childrenCount = React.Children.count(childrenObj);\n    if (childrenCount === 1) {\n      filterElement(childrenObj);\n    } else if (childrenCount > 1) {\n        React.Children.forEach(childrenObj, filterElement);\n    }\n    return React.createElement(Element, {}, res);\n  };\n  FilterSlot.SubSlot = FilterSlotFactory(FilterSlot);\n  return FilterSlot;\n};\n\nconst DefaultFilterSlot: IFilterSlotComponent = createFilterSlot();\n\nexport {DefaultFilterSlot as default};\n","import * as React from 'react';\nimport {injectSlot} from '../utils/createSlot';\nimport {ScopeMap} from '../utils/useScope';\nimport { ISlotComponent } from '../utils/createSlot';\n\n/**\n * Allows composition through children.\n */\nexport interface ICompositionSlot {\n  /**\n   * Children with rules on passing (reads props, multiple, )\n   */\n  children?: any;\n  /**\n   * Elements or indexed children object passed for Compositioning\n   */\n  scope: any;\n  /**\n   * Include all non-slottable elements\n   */\n  all?: boolean;\n  /**\n   * [planned] - group by type in order of appearance. Currently not implemented,\n   * but will be if cases are found.\n   */\n  // grouped?: boolean;\n}\n\nconst isSlotted = (\n  child: any | ISlotComponent,\n  ): child is ISlotComponent => child && child.type && child.type.displaySymbol;\n\nexport interface ICompositionSubSlot extends ICompositionSlot {\n  scope: React.Context<any>;\n}\n\ninterface ICompositionSlotComponent<T = {}> extends React.FC<ICompositionSlot & T> {\n  SubSlot: React.FunctionComponent<ICompositionSubSlot>;\n}\n\nconst CompositionSlotFactory = (Element: React.FC<ICompositionSlot>): React.FC<ICompositionSubSlot> => (\n  { scope: Context, ...props },\n) => {\n  return <Context.Consumer>{(value) => <Element {...props} scope={value} />}</Context.Consumer>;\n};\n\ninterface IOverloadCreateCompositionSlot {\n  (Element: keyof JSX.IntrinsicElements | React.ComponentType): ICompositionSlotComponent;\n  <T extends keyof JSX.IntrinsicElements>(\n    Element: T | React.ComponentType,\n  ): ICompositionSlotComponent<Partial<JSX.IntrinsicElements[T]>>;\n  <T extends {}>(Element?: React.ComponentType): ICompositionSlotComponent<T>;\n  <S extends keyof JSX.IntrinsicElements, T extends {}>(\n    Element?: React.ComponentType,\n  ): ICompositionSlotComponent<T & Partial<JSX.IntrinsicElements[S]>>;\n  <T extends {}, S extends keyof JSX.IntrinsicElements>(\n    Element?: React.ComponentType,\n  ): ICompositionSlotComponent<T & Partial<JSX.IntrinsicElements[S]>>;\n}\nconst createCompositionSlot: IOverloadCreateCompositionSlot = (\n    Element: keyof JSX.IntrinsicElements | React.ComponentType = React.Fragment,\n  ) => {\n  const CompositionSlotComponent = ({ scope, all, children }: ICompositionSlot) => {\n    const childrenArr = Array.isArray(children) ? children : [children];\n    const childrenObj = childrenArr.reduce((prev, el) => {\n      if (el.type && el.type.displaySymbol) {\n        if (!prev[el.type.displaySymbol]) {\n          prev[el.type.displaySymbol] = [];\n        }\n        prev[el.type.displaySymbol].push(el);\n      }\n      return prev;\n    },\n    {} as {[name: string]: any[]});\n    const res: JSX.Element[] = [];\n    const filterElement = (child: JSX.Element, key?: number) => {\n      if (isSlotted(child) && child.type && child.type.Slot) {\n        const result = childrenObj[child.type.Slot.displaySymbol];\n        if (result) {\n          for (const El of result) {\n            const slotted = injectSlot(child.type, El.props)(child, key);\n            if (slotted) {\n              res.push(slotted);\n            }\n          }\n        }\n      } else if (all) {\n        res.push(child);\n      }\n    };\n    let scopeObj = scope;\n    if (scope instanceof ScopeMap) {\n      scopeObj = scope.scopeChildren();\n    }\n    const childrenCount = React.Children.count(scopeObj);\n    if (childrenCount === 1) {\n      filterElement(scopeObj);\n    } else if (childrenCount > 1) {\n        React.Children.forEach(scopeObj, filterElement);\n    }\n    return React.createElement(Element, {}, res);\n  };\n  CompositionSlotComponent.SubSlot = CompositionSlotFactory(CompositionSlotComponent);\n  return CompositionSlotComponent;\n};\n\nconst CompositionSlot: ICompositionSlotComponent = createCompositionSlot();\n\nexport default CompositionSlot;\n"],"sourceRoot":""}